<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Latein Lern App</title>
<style>
  body,html {
    margin:0; padding:0; height:100%;
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    background:#fafafa;
    color:#333;
    display:flex;
    flex-direction: column;
    min-height: 100vh;
  }
  #fixedHeader {
    position: fixed;
    top:10px; left:15px; right:15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: 700;
    font-size: 22px;
    color: #222;
    user-select:none;
    z-index: 1000;
    background: transparent;
  }
  #usernameDisplay {
    font-weight: 600;
    margin-right: 10px;
    font-size: 16px;
    color: #444;
    display: none;
  }
  #settingsBtn {
    background:none;
    border:none;
    font-size: 22px;
    cursor:pointer;
    color:#666;
    padding:4px 8px;
    border-radius:6px;
    transition: background 0.2s ease;
  }
  #settingsBtn:hover {
    background: #ddd;
  }

  #appContainer {
    margin: 60px auto 70px;
    width: 400px;
    max-width: 95vw;
    flex-grow: 1;
  }
  .card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.12);
    padding: 30px 25px;
    text-align: center;
  }
  h2,h3 {
    margin-bottom: 20px;
    font-weight: 600;
  }
  input {
    width: 100%;
    padding: 10px 14px;
    margin-bottom: 15px;
    border: 1.5px solid #ccc;
    border-radius: 8px;
    font-size: 16px;
    outline-offset: 2px;
    transition: border-color 0.3s ease;
  }
  input:focus {
    border-color: #888;
  }
  button {
    background: #333;
    color: white;
    border: none;
    padding: 12px 0;
    margin: 6px 0;
    width: 100%;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
    transition: background 0.2s ease;
  }
  button:hover {
    background: #555;
  }
  #authMessage, #lessonMessage {
    min-height: 24px;
    margin-top: 12px;
    font-weight: 600;
    color: #d33;
  }
  #authMessage.success, #lessonMessage.success {
    color: #2a8;
  }

  /* Verstecke alle Sektionen standardmäßig */
  #auth, #menu, #lessonView, #shopView, #rankView, #questView, #settingsModal {
    display: none;
  }
  .show {
    display: block !important;
  }

  /* Lektionen */
  .lesson-card {
    background: #eee;
    border-radius: 14px;
    padding: 18px 16px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.05);
    margin-bottom: 15px;
    cursor: pointer;
    user-select: none;
    transition: background 0.2s ease;
  }
  .lesson-card:hover {
    background: #ddd;
  }
  .lesson-card.active {
    background: #c7eaff;
  }
  .lesson-card h3 {
    margin: 0;
  }

  /* Antwort Buttons */
  .answer-btn {
    background: #eee;
    color: #222;
    margin: 8px 0;
    padding: 12px 10px;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    border: 2px solid transparent;
    transition: background 0.3s, border-color 0.3s;
  }
  .answer-btn:hover {
    background: #ddd;
  }
  .answer-btn.correct {
    background: #4CAF50;
    color: white;
    border-color: #3e8e41;
  }
  .answer-btn.incorrect {
    background: #f44336;
    color: white;
    border-color: #b93126;
  }
  .answer-btn.disabled {
    cursor: default;
    pointer-events: none;
  }

  /* Fortschrittsbalken */
  #progressBarContainer {
    margin: 20px 0 10px;
    background: #ddd;
    border-radius: 20px;
    height: 16px;
    overflow: hidden;
  }
  #progressBar {
    height: 100%;
    width: 0%;
    background: #4caf50;
    border-radius: 20px;
    transition: width 0.4s ease;
  }

  /* Settings Modal */
  #settingsModal {
    position: fixed;
    top:0; left:0; right:0; bottom:0;
    background: rgba(0,0,0,0.3);
    justify-content: center;
    align-items: center;
    z-index: 1100;
  }
  #settingsContent {
    background: white;
    border-radius: 14px;
    padding: 30px 25px;
    width: 300px;
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
    text-align: center;
  }
  #settingsContent h3 {
    margin-top: 0;
  }
  #settingsContent button {
    background: #c33;
    margin-top: 15px;
    width: 100%;
  }
  #settingsContent button:hover {
    background: #a22;
  }
  #settingsCloseBtn {
    margin-top: 12px;
    background: #888;
    width: 100%;
  }
  #settingsCloseBtn:hover {
    background: #555;
  }

  /* Bottom Navigation Bar */
  #bottomNavBar {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 60px;
    background: white;
    border-top: 1px solid #ddd;
    display: flex;
    justify-content: space-around;
    align-items: center;
    box-shadow: 0 -2px 6px rgba(0,0,0,0.05);
    user-select: none;
    z-index: 1000;
    display: none; /* start hidden */
  }
  .nav-btn {
    flex-grow: 1;
    color: #666;
    font-size: 12px;
    font-weight: 600;
    text-align: center;
    cursor: pointer;
    padding: 6px 4px 2px;
    display: flex;
    flex-direction: column;
    align-items: center;
    transition: color 0.2s ease;
  }
  .nav-btn svg {
    width: 24px;
    height: 24px;
    margin-bottom: 4px;
    fill: currentColor;
  }
  .nav-btn.active {
    color: #4caf50;
  }
  .nav-btn:hover:not(.active) {
    color: #4caf50;
  }
</style>
</head>
<body>

<!-- Header -->
<div id="fixedHeader">
  <div>Lern App</div>
  <div style="display:flex; align-items:center;">
    <div id="usernameDisplay"></div>
    <button id="settingsBtn" title="Einstellungen ⚙️" style="display:none;">⚙️</button>
  </div>
</div>

<!-- App Container -->
<div id="appContainer">

  <!-- Login/Register -->
  <div id="auth" class="card show">
    <h2>Login / Registrieren</h2>
    <input type="text" id="username" placeholder="Benutzername" autocomplete="username" />
    <input type="password" id="password" placeholder="Passwort" autocomplete="current-password" />
    <button id="loginBtn">Anmelden</button>
    <button id="registerBtn">Registrieren</button>
    <div id="authMessage"></div>
  </div>

  <!-- Menü / Lektionen -->
  <div id="menu" class="card">
    <h2>Wähle eine Lektion</h2>
    <div id="lessonList"></div>
  </div>

  <!-- Lektion Ansicht -->
  <div id="lessonView" class="card">
    <h2 id="lessonTitle"></h2>
    <div id="progressBarContainer"><div id="progressBar"></div></div>
    <div id="questionText" style="font-weight:600; margin-bottom: 20px;"></div>
    <div id="answersContainer"></div>
    <div id="lessonMessage"></div>
    <button id="backToMenuBtn" style="margin-top:20px;">Zurück zum Menü</button>
  </div>

  <!-- Weitere Bereiche, nur Platzhalter -->
  <div id="shopView" class="card"><h2>Shop (kommt bald)</h2></div>
  <div id="rankView" class="card"><h2>Rangliste (kommt bald)</h2></div>
  <div id="questView" class="card"><h2>Quests (kommt bald)</h2></div>

</div>

<!-- Bottom Navigation Bar -->
<div id="bottomNavBar">
  <div class="nav-btn active" data-section="menu" title="Lektion">
    <svg viewBox="0 0 24 24"><path d="M19 2H9a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h10V2zM7 4H5a2 2 0 0 0-2 2v14a1 1 0 0 0 1.447.894L7 19.118V4z"/></svg>
    Lektion
  </div>
  <div class="nav-btn" data-section="quest" title="Quest">
    <svg viewBox="0 0 24 24"><path d="M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8zm0-13a5 5 0 1 0 5 5 5 5 0 0 0-5-5z"/></svg>
    Quest
  </div>
  <div class="nav-btn" data-section="shop" title="Shop">
    <svg viewBox="0 0 24 24"><path d="M3 6h18v2H3zm2 4h14l-1.5 8.5a1 1 0 0 1-1 .5H8a1 1 0 0 1-1-.5L5 10z"/></svg>
    Shop
  </div>
  <div class="nav-btn" data-section="rank" title="Rang">
    <svg viewBox="0 0 24 24"><path d="M17 4V2H7v2H2v4a7 7 0 0 0 14 0V4zm-7 4v5h2v-5z"/></svg>
    Rang
  </div>
</div>

<!-- Settings Modal -->
<div id="settingsModal">
  <div id="settingsContent">
    <h3>Einstellungen</h3>
    <button id="logoutBtn">Abmelden</button>
    <button id="settingsCloseBtn">Schließen</button>
  </div>
</div>

<script>
(() => {
  // Simulierte User-Datenbank (im echten Fall Serveranbindung)
  const userDB = JSON.parse(localStorage.getItem("userDB") || "{}");
  // User-Daten im Session-Storage, bleibt bei Tab offen
  let currentUser = sessionStorage.getItem("currentUser") || null;

  // Lektionen mit Fragen, Antworten, korrekter Index
  const lessons = [
    {
      id: "lektion1",
      title: "Lektion 1 - Basics",
      questions: [
        {
          question: "Was bedeutet 'amicus'?",
          answers: ["Freund", "Feind", "Haus", "Baum"],
          correct: 0
        },
        {
          question: "Was bedeutet 'puella'?",
          answers: ["Mädchen", "Junge", "Baum", "Himmel"],
          correct: 0
        },
        {
          question: "Was bedeutet 'iter'?",
          answers: ["Krieg", "Weg", "Was?", "Durch"],
          correct: 1
        },
        {
          question: "Was bedeutet 'qui'?",
          answers: ["Baum", "Weg", "Welche", "Weil"],
          correct: 2
        },
        {
          question: "Was bedeutet 'quid'?",
          answers: ["Deswegen", "Was?", "Welche", "Weil"],
          correct: 1
        },
        {
          question: "Was bedeutet 'iubere'?",
          answers: ["Befehlen", "So", "Taumeln", "Obwohl"],
          correct: 0
        },

      ]
    },
    {
      id: "lektion2",
      title: "Lektion 2 - Fortgeschritten",
      questions: [
        {
          question: "Was heißt 'bellum'?",
          answers: ["Krieg", "Friede", "Haus", "Freund"],
          correct: 0
        },
        {
          question: "Was bedeutet 'tempus'?",
          answers: ["Zeit", "Ort", "Mensch", "Baum"],
          correct: 0
        }
      ]
    },
    {
      id: "lektion3",
      title: "Lektion 3 - WH-Lek.20-Pontes",
      questions: [
        {
          question: "Was heißt 'auris'?",
          answers: ["Ohr", "Friede", "Baumhaus", "Wohlstand"],
          correct: 0
        },
        {
          question: "Was bedeutet 'constituere'?",
          answers: ["laufen", "beschließen", "Mensch", "reiten"],
          correct: 0
        }
      ]
    }
  ];

  // State
  let selectedLesson = null;
  let currentQuestionIndex = 0;

  // DOM Elemente
  const authSection = document.getElementById("auth");
  const menuSection = document.getElementById("menu");
  const lessonView = document.getElementById("lessonView");
  const lessonList = document.getElementById("lessonList");
  const lessonTitle = document.getElementById("lessonTitle");
  const questionText = document.getElementById("questionText");
  const answersContainer = document.getElementById("answersContainer");
  const lessonMessage = document.getElementById("lessonMessage");
  const backToMenuBtn = document.getElementById("backToMenuBtn");
  const loginBtn = document.getElementById("loginBtn");
  const registerBtn = document.getElementById("registerBtn");
  const usernameInput = document.getElementById("username");
  const passwordInput = document.getElementById("password");
  const authMessage = document.getElementById("authMessage");
  const usernameDisplay = document.getElementById("usernameDisplay");
  const bottomNavBar = document.getElementById("bottomNavBar");
  const navButtons = bottomNavBar.querySelectorAll(".nav-btn");
  const settingsBtn = document.getElementById("settingsBtn");
  const settingsModal = document.getElementById("settingsModal");
  const logoutBtn = document.getElementById("logoutBtn");
  const settingsCloseBtn = document.getElementById("settingsCloseBtn");
  const progressBar = document.getElementById("progressBar");

  // Hilfsfunktion zum Wechseln der angezeigten Sektion
  function showSection(section) {
    // Alle ausblenden
    [authSection, menuSection, lessonView,
     document.getElementById("shopView"),
     document.getElementById("rankView"),
     document.getElementById("questView")].forEach(s => s.classList.remove("show"));

    // Bottom Nav Bar: Aktivieren / Deaktivieren
    if (section === menuSection || section === lessonView
        || section === document.getElementById("shopView")
        || section === document.getElementById("rankView")
        || section === document.getElementById("questView")) {
      bottomNavBar.style.display = "flex";
    } else {
      bottomNavBar.style.display = "none";
    }

    // Zeige gewünschte Sektion
    if(section) section.classList.add("show");
  }

  // Login Funktion
  function login(username, password) {
    authMessage.textContent = "";
    if (!username || !password) {
      authMessage.textContent = "Bitte Benutzername und Passwort eingeben.";
      return false;
    }
    if (!userDB[username]) {
      authMessage.textContent = "Benutzer nicht gefunden.";
      return false;
    }
    if (userDB[username] !== password) {
      authMessage.textContent = "Falsches Passwort.";
      return false;
    }
    currentUser = username;
    sessionStorage.setItem("currentUser", currentUser);
    authMessage.textContent = "";
    showAppAfterLogin();
    return true;
  }

  // Registrierung Funktion
  function register(username, password) {
    authMessage.textContent = "";
    if (!username || !password) {
      authMessage.textContent = "Bitte Benutzername und Passwort eingeben.";
      return false;
    }
    if (userDB[username]) {
      authMessage.textContent = "Benutzername schon vergeben.";
      return false;
    }
    userDB[username] = password;
    localStorage.setItem("userDB", JSON.stringify(userDB));
    authMessage.textContent = "Registrierung erfolgreich! Bitte anmelden.";
    return true;
  }

  // Nach Login, zeige Menü und Bottom-Bar, Header Username, Settings Button
  function showAppAfterLogin() {
    usernameDisplay.textContent = currentUser;
    usernameDisplay.style.display = "inline-block";
    settingsBtn.style.display = "inline-block";
    usernameInput.value = "";
    passwordInput.value = "";
    authMessage.textContent = "";
    showSection(menuSection);
    renderLessonList();
  }

  // Logout Funktion
  function logout() {
    currentUser = null;
    sessionStorage.removeItem("currentUser");
    usernameDisplay.style.display = "none";
    settingsBtn.style.display = "none";
    showSection(authSection);
  }

  // Lektionen Liste anzeigen
  function renderLessonList() {
    lessonList.innerHTML = "";
    lessons.forEach(lesson => {
      const div = document.createElement("div");
      div.className = "lesson-card";
      div.textContent = lesson.title;
      div.onclick = () => {
        selectedLesson = lesson;
        currentQuestionIndex = 0;
        startLesson();
      };
      lessonList.appendChild(div);
    });
  }

  // Start Lektion: erste Frage laden
  function startLesson() {
    lessonMessage.textContent = "";
    lessonTitle.textContent = selectedLesson.title;
    showSection(lessonView);
    renderQuestion();
  }

  // Frage und Antworten anzeigen
  function renderQuestion() {
    const q = selectedLesson.questions[currentQuestionIndex];
    questionText.textContent = q.question;
    answersContainer.innerHTML = "";
    lessonMessage.textContent = "";

    // Fortschritt aktualisieren
    const progressPercent = Math.floor((currentQuestionIndex / selectedLesson.questions.length) * 100);
    progressBar.style.width = progressPercent + "%";

    q.answers.forEach((answer, i) => {
      const btn = document.createElement("button");
      btn.className = "answer-btn";
      btn.textContent = answer;
      btn.onclick = () => checkAnswer(i, btn);
      answersContainer.appendChild(btn);
    });
  }

  // Antwort prüfen
  function checkAnswer(selectedIndex, btnClicked) {
    const q = selectedLesson.questions[currentQuestionIndex];
    const buttons = answersContainer.querySelectorAll("button");
    buttons.forEach(b => {
      b.classList.add("disabled");
      b.onclick = null;
    });

    if (selectedIndex === q.correct) {
      btnClicked.classList.add("correct");
      lessonMessage.textContent = "Richtig!";
      lessonMessage.className = "success";
    } else {
      btnClicked.classList.add("incorrect");
      lessonMessage.textContent = "Falsch! Richtig wäre: " + q.answers[q.correct];
      lessonMessage.className = "";
      // Richtige Antwort hervorheben
      buttons[q.correct].classList.add("correct");
    }

    // Nächste Frage oder Ende nach 1.5 Sekunden
    setTimeout(() => {
      currentQuestionIndex++;
      if (currentQuestionIndex >= selectedLesson.questions.length) {
        // Lektion beendet
        progressBar.style.width = "100%";
        lessonMessage.textContent = "Lektion abgeschlossen!";
        lessonMessage.className = "success";
        answersContainer.innerHTML = "";
      } else {
        renderQuestion();
      }
    }, 1500);
  }

  // Navigation Bottom Bar Klick
  function navBarClick(event) {
    const btn = event.target.closest(".nav-btn");
    if (!btn) return;
    if (!currentUser) return; // Nur eingeloggt
    const sectionName = btn.dataset.section;

    navButtons.forEach(b => b.classList.remove("active"));
    btn.classList.add("active");

    switch (sectionName) {
      case "menu": showSection(menuSection); break;
      case "shop": showSection(document.getElementById("shopView")); break;
      case "rank": showSection(document.getElementById("rankView")); break;
      case "quest": showSection(document.getElementById("questView")); break;
    }
  }

  // Event Listeners
  loginBtn.addEventListener("click", () => {
    login(usernameInput.value.trim(), passwordInput.value);
  });
  registerBtn.addEventListener("click", () => {
    register(usernameInput.value.trim(), passwordInput.value);
  });
  backToMenuBtn.addEventListener("click", () => {
    showSection(menuSection);
    lessonMessage.textContent = "";
  });
  bottomNavBar.addEventListener("click", navBarClick);
  settingsBtn.addEventListener("click", () => {
    settingsModal.style.display = "flex";
  });
  logoutBtn.addEventListener("click", () => {
    logout();
    settingsModal.style.display = "none";
  });
  settingsCloseBtn.addEventListener("click", () => {
    settingsModal.style.display = "none";
  });

  // Beim Laden: Wenn User im SessionStorage ist, direkt App anzeigen
  if (currentUser && userDB[currentUser]) {
    showAppAfterLogin();
  } else {
    showSection(authSection);
  }

})();
</script>

</body>
</html>
